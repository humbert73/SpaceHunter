<html><head>
<title>SpaceHunter</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">

<script type="text/javascript" src="gl-matrix.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>
<script type="text/javascript" src="game-utils.js"></script>
<script type="text/javascript" src="fbo.js"></script>
<script type="text/javascript" src="heightfield.js"></script>
<script type="text/javascript" src="background.js"></script>
<script type="text/javascript" src="spaceship.js"></script>
<script type="text/javascript" src="invaders.js"></script>
<script src="rocket.js"></script>

<script id="heightfield-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition, 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>

<script id="heightfield-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform vec2 uOffset;
uniform float uAmplitude; // amplitude du bruit
uniform float uFrequency; // frequence du bruit
uniform float uPersistence; // persistence du bruit

varying vec2 vTextureCoord; // recuperation de la coord rasterisee

float hash(vec2 p) {
    // pseudo random fonction
    float h = dot(mod(p,vec2(100.0)),vec2(127.1,311.7));
    return -1.0 + 2.0*fract(sin(h)*43758.5453123);
}

float vnoise(in vec2 p) {
    // genere une valeur random sur une position sp�cifique d'une grille
    // pris sur shadertoy
    vec2 i = floor(p);
    vec2 f = fract(p);

    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( hash( i + vec2(0.0,0.0) ),
                     hash( i + vec2(1.0,0.0) ), u.x),
                mix( hash( i + vec2(0.0,1.0) ),
                     hash( i + vec2(1.0,1.0) ), u.x), u.y);
}

float fractalNoise(in vec2 p) {
    const int nb = 5; // nb octave
    float f = uFrequency; // frequency
    float a = uAmplitude; // amplitude
    float e = uPersistence; // persistence

    float n = 0.0;
    for(int i=0;i<nb;++i) {
        n = n + a*vnoise(p*f);
        f = 2.0*f;
        a = a*e;
    }
    return n;
}

void main(void) {
    vec2 p = vTextureCoord*2.0-vec2(1.0); // coordonnees
    float n = fractalNoise(p+uOffset)*0.5+0.5; // bruit

    gl_FragColor = vec4(vec3(n),1.0);

}
</script>

<script id="background-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee


    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition, 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>

<script id="background-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

uniform sampler2D uHeightfield; // la texture de hauteurs
uniform vec2 uTextureSize; // la taille de la texture
varying vec2 vTextureCoord; // recuperation de la coord rasterisee

// Color values
uniform vec3 colorKa;
uniform vec3 colorKd;
uniform vec3 colorKs;
uniform vec3 colorLi;
uniform float colorQ;
uniform int mode;


vec3 shade(in vec3 n,in float d) {
    vec2 xy = vTextureCoord.xy*2.0-vec2(1.0);
    vec3 v = -normalize(vec3(xy.x,xy.y,1.0)); // vecteur vue
    vec3 l = normalize(vec3(-0.3,0.0,1.0)); // vecteur lumi�re (pourrait varier au cours du temps pour de meilleurs effets)

    vec3 ka = colorKa;
    vec3 kd = colorKd;
    vec3 ks = colorKs;  // vecteur couleur;
    vec3 li = colorLi;
    float q = colorQ;

    if (mode==0) { // 0 => psycho mode
        ka = vec3(xy.x,xy.y,0.5);
    }
    if (mode==1) { // 1 => tempête mode
        ka = vec3(0.3,0.0,xy.y);
    }

    vec3 r = reflect(l,n);
    float s = pow(max(dot(r,v),0.0), q);
    vec3 c = ka + kd * d + ks * s * li;

    return c;
}

vec3 computeNormal() {
    const float scale = 20.0;

    vec2 ps = 1.0/uTextureSize;
    float xp = texture2D(uHeightfield,vTextureCoord+vec2( ps.x,0.0)).x;
    float xm = texture2D(uHeightfield,vTextureCoord+vec2(-ps.x,0.0)).x;
    float yp = texture2D(uHeightfield,vTextureCoord+vec2(0.0, ps.y)).x;
    float ym = texture2D(uHeightfield,vTextureCoord+vec2(0.0,-ps.y)).x;

    float gx = 0.5*(xp-xm)*scale;
    float gy = 0.5*(yp-ym)*scale;

    vec3 v1 = normalize(vec3(1.0,0.0,gx));
    vec3 v2 = normalize(vec3(0.0,1.0,gy));

    return cross(v1,v2);
}

void main(void) {
    float d = texture2D(uHeightfield,vTextureCoord).x;
    vec3 n = computeNormal();
    vec3 s = shade(n,d);
    gl_FragColor = vec4(s,1.0);

}
</script>

<script id="spaceship-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>
<script id="spaceship-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee
uniform sampler2D uMaTexture;
uniform float uAlpha;

void main(void) {
    // couleur par defaut du vaisseau... a changer
    /*vec4 text = texture2D(uMaTexture,  vTextureCoord);
    gl_FragColor = vec4( text.rgb, text.a * uAlpha ); // vec4(1.0,0.0,0.0,1.0);*/
    
    gl_FragColor = texture2D(uMaTexture,  vTextureCoord);// vec4(1.0,0.0,0.0,1.0);

}
</script>

<script id="invader-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>

<script id="invader-fs" type="x-shader/x-fragment">
// *** le fragment shader ***
precision highp float; // precision des nombres flottant

varying vec2 vTextureCoord; // recuperation de la coord rasterisee
uniform sampler2D uMaTexture;
uniform float uAlpha;


void main(void) {
    // couleur par defaut du vaisseau... a changer
    /*vec4 text = texture2D(uMaTexture,  vTextureCoord);
    gl_FragColor = vec4( text.rgb, text.a * uAlpha ); // vec4(1.0,0.0,0.0,1.0);*/

    gl_FragColor = texture2D(uMaTexture,  vTextureCoord);// vec4(1.0,0.0,0.0,1.0);

}


</script>

<script id="rocket-vs" type="x-shader/x-vertex">
    // *** le vertex shader ***
    attribute vec3 aVertexPosition; // la position du sommet
    attribute vec2 aVertexCoord; // sa coordonnee de texture

    uniform vec2 uPosition; // position du vaisseau
    varying vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

    void main(void) {
        // projection de la position
        gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

        // stockage de la coordonnee de texture
        vTextureCoord = aVertexCoord;
    }
</script>

<script id="rocket-fs" type="x-shader/x-fragment">
    // *** le fragment shader ***
    precision highp float; // precision des nombres flottant

    varying vec2 vTextureCoord; // recuperation de la coord rasterisee
    uniform sampler2D uMaTexture;
    uniform float uAlpha;

    void main(void) {
        // couleur par defaut du vaisseau... a changer
        /*vec4 text = texture2D(uMaTexture,  vTextureCoord);
        gl_FragColor = vec4( text.rgb, text.a * uAlpha ); // vec4(1.0,0.0,0.0,1.0);*/

        gl_FragColor = texture2D(uMaTexture,  vTextureCoord);// vec4(1.0,0.0,0.0,1.0);

    }


</script>

<script type="text/javascript">

    var fbo; // le FBO utilis� pour rendre la texture de hauteur
    var heightfield; // l'objet heightfield, sa g�om�trie, son shader
    var background; // l'objet background, sa g�om�trie, son shader
    var spaceship; // l'objet spaceship, sa g�om�trie, son shader
    var invader; // l'objet invader, sa géométrie, son shader, sa maman
    var rocket; // l'objet rocket, sa géométrie, son shader, son papa

    function drawScene() {
        // initialisation du viewport
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

        // efface les buffers de couleur et de profondeur
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // active le FBO (a partie de la, on dessine dans la texture associ�e)
        gl.bindFramebuffer(gl.FRAMEBUFFER,fbo.id());

        // dessin du heightfield
        gl.useProgram(heightfield.shader());
        heightfield.sendUniformVariables();
        heightfield.draw();

        // desactivation du FBO (on dessine sur l'ecran maintenant)
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        // dessin du background (utilise la texture dessin�e pr�c�demment)
        gl.useProgram(background.shader());
        background.sendUniformVariables();
        background.draw();

        // dessin du vaisseau (shader par defaut ici)
        gl.useProgram(spaceship.shader());
        spaceship.sendUniformVariables();
        spaceship.draw();

        // dessin de l'invader
        gl.useProgram(invader.shader());
        invader.sendUniformVariables();
        invader.draw();

        // dessin d'une rocket
        if (rocket.drawn) {
            gl.useProgram(rocket.shader());
            rocket.sendUniformVariables();
            rocket.draw();
        }
	
		document.querySelector('#ui-life > span').innerText = spaceship.life;
    }

    // une bonne mani�re de gerer les evenements claviers
    // permet d'avoir plusieurs touches appuy�es simultan�men
    var currentlyPressedKeys = {};

    // ----------------------------------------------------------------------------------------------------------------
	// -------------------------- GLOBAL VAR GAME
	// ----------------------------------------------------------------------------------------------------------------

	// On pause: TRUE: Game stopped / FASLE: Game run
	var onPause = false;

	var currentScore = 0;

	function handleKeyPress( event ) {
		//currentlyPressedKeys[event.key] = true;

		var currentKey = event.key;

		// Play / pause handler
		if ( currentKey === 'p' )
			onPause = !onPause;

		// New game handler
		if ( currentKey === 'n' ) {
			currentScore = 0;
			spaceship.initParameters();
			onPause = true;
			// TODO Do new game support
		}

		console.log( currentKey, currentScore, spaceship.life );

	}


    function handleKeyUp(event) {
        currentlyPressedKeys[event.key] = false;
    }

	function handleKeys() {
 		document.querySelector('#ui-score > span').innerText = currentScore;
	}

    function mouseMove(event) {

	    if ( !onPause ) {
		    // controle de la position du vaisseau en fonction de la souris
		    // la position est remapp�e entre -1 et 1 pour cela
		    var newx = 2.0 * (event.clientX / gl.viewportWidth) - 1.0;
		    var newy = -(2.0 * (event.clientY / gl.viewportHeight) - 1.0);
		    spaceship.setPosition( newx, newy );
	    }
    }

    function mouseClic(event) {
	    if ( !onPause) {
	        console.log(event);
	        rocket.drawn = true;
	        var x = 2.0 * (event.x / gl.viewportWidth) - 1.0;
	        var y = -(2.0 * (event.y / gl.viewportHeight) - 1.0);
            rocket.setPosition(x,y);
	        console.log(x, y);
        }
        event.preventDefault();
    }
    
    function onChange() {
		this.blur();
	}

    // animation
    var lastTime = 0;
    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            // chaque objet est susceptible de s'animer
            var elapsed = timeNow - lastTime;
            heightfield.setParameters(elapsed);
            spaceship.setParameters(elapsed);
            background.setParameters(elapsed);
            
            if( !onPause )
				rocket.setParameters(elapsed);
        }
        lastTime = timeNow;
        
        document.querySelector('#mode').disabled = !onPause;
    }

    function tick() {
        requestAnimFrame(tick);
       handleKeys();
        drawScene();
        animate();
    }


    function webGLStart() {
        // initialisation du canvas et des objets OpenGL
        var canvas = document.getElementById("SpaceShip");
		var mode = document.querySelector( '#mode' );
        initGL(canvas);

        // init FBO
        fbo = new FBO(canvas.width,canvas.height,1,false);

        // init de tous les shaders
        initHeightfieldShader();
        initBackgroundShader();
        initSpaceshipShader();
        initInvaderShader();
        initRocketShader();

        // init de tous les objets
        heightfield = new Heightfield();
        background = new Background(fbo.texture(0));
        spaceship = new Spaceship();
        invader = new Invader();
        rocket = new Rocket();

        // la couleur de fond sera noire
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // active le teste de profondeur
        gl.enable(gl.DEPTH_TEST);

        /* Mouse and keyboard interaction functions */
        canvas.addEventListener('mousedown', mouseClic, true);
        canvas.addEventListener('mousemove', mouseMove, true);
		mode.addEventListener('change', onChange, true);

        document.onkeypress = handleKeyPress;
        /*document.onkeyup = handleKeyUp;*/

        // dessine la scene
        tick();
    }

</script>


</head>

<body onload="webGLStart();"  style="width: 800px; margin: 0; padding: 0; position: relative;">
	<canvas id="SpaceShip" style="border: none;" width="800" height="800"></canvas>
	<h1 style="text-align: center; width:400px; position:absolute; top: 0; left: 0; background: rgba(255, 255, 255, 0.5); margin: 0; padding: 10px 0;" id="ui-score" >Current score: <span>0</span></h1>
	<h1 style="text-align: center; width:400px; position:absolute; top: 0; left: 400px; background: rgba(255, 255, 255, 0.5); margin: 0; padding: 10px 0;" id="ui-life">Life: <span>0</span></h1>
    <div>
    <form name="parameters">
        <label for="mode">Mode: </label>
        <select id="mode" name="mode" size="1">
            <option>normal
            <option>psycho
            <option>tempete
            <option>caverne
            <option>mars
        </select>
    </form>
    </div>
</body>
</html>
